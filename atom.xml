<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LunaticNote</title>
  
  <subtitle>想写点啥又不知道该写啥，暂时就这样吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-08T15:49:44.631Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>LunaticNote</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA 8</title>
    <link href="http://yoursite.com/2020/05/08/JAVA-8/"/>
    <id>http://yoursite.com/2020/05/08/JAVA-8/</id>
    <published>2020-05-08T15:37:37.000Z</published>
    <updated>2020-05-08T15:49:44.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA8-1"><a href="#JAVA8-1" class="headerlink" title="JAVA8(1)"></a>JAVA8(1)</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><blockquote><p> &ensp;  &ensp;  &ensp;  &ensp; 是什么让我选择了java8，是命运吗？是爱吗？🤮，好吧我自己也编不下去了，其实最先关注java8是因为Lambda和stream API，然后才了解到了他的一系列的数据结构和底层的优化，而且还是长期支持的版本,so你懂的！</p></blockquote><h3 id="更快的速度："><a href="#更快的速度：" class="headerlink" title="更快的速度："></a>更快的速度：</h3><blockquote><p> &ensp;  &ensp;  &ensp;  &ensp; 效率和速度这是一个永远无法避免的问题，以前的底层结构z中方法区（堆中永久区的一部分，用于存放核心类库的信息，几乎不会被GC回收）总是被单独拎出来，因为一些厂商像sun公司的Hostpot他的JVM存在永久区而另外像IBM等一些公司已经移除了这一区域，在java8之后他统一取消了这一区域，出现<strong>Metaspace</strong>(元空间)，他和方法区的不同是他直接用的是物理内存发生内存溢出(out of memory error OOM)的异常发生的机率降低，同时永久区的改变使得JVM调优中的PremGenSize 、MaxPremGenSize 无效 ,取而代之的是MetaspaceSize和MaxMetaspaceSize；</p></blockquote><h3 id="数据结构的改变"><a href="#数据结构的改变" class="headerlink" title="数据结构的改变"></a>数据结构的改变</h3><blockquote><p> &ensp;  &ensp;  &ensp;  &ensp; 可能对于你来说这些不足以打动你但是，同时java8也对一些数据结构进行了改编，像HashMap,哈希算法因为碰撞会导致效率变低，在java8中他在原有的数组+链表的结构上引入了红黑树，这是一种自平衡的二叉查找树( symmetric binary B-trees )，除了添加都非常快。</p><p> &ensp;  &ensp;  &ensp;  &ensp; Java7的ConcurrentHashMap中通过Segment引入了分段加锁机制用来解决并发中HashMap可能导致的死循环问题。而Java8又对ConcurrentHashMap进行了改动，除了引入红黑树外，还去除了Segment，那么在ava8是如何保证线程安全的呢？</p><p> &ensp;  &ensp;  &ensp;  &ensp; 其实他内部采用了CAS( compare and swap )+ Synchronized ，锁的粒度： 原来是对需要进行数据操作的Segment加锁，现调整为对每个数组元素加锁（Node） </p><p> &ensp;  &ensp;  &ensp;  &ensp; CAS这是一种基于锁的操作，而且是乐观锁，在java中锁分为乐观锁和悲观锁。悲观锁是将资源锁住，等一个之前获得锁的线程释放锁之后，下一个线程才可以访问。而乐观锁采取了一种宽泛的态度，通过某种方式不加锁来处理资源，比如通过给记录加version来获取数据，性能较悲观锁有很大的提高。操作包含三个操作数 内存位置（V）、预期原值（A）和新值(B)。如果内存地址里面的值和A的值是一样的，那么就将内存里面的值更新成B。CAS是通过无限循环来获取数据的，若果在第一轮循环中，a线程获取地址里面的值被b线程修改了，那么a线程需要自旋，到下次循环才有可能机会执行</p></blockquote><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><blockquote><p> &ensp;  &ensp;  &ensp;  &ensp; 他是一个匿名的函数，可以理解为一段可以传递的代码（将代码像数据一样进行传递）。可以写出跟简洁、灵活的代码。作为一种更紧凑的代码风格，使java的语言表达能力得到了提升。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; list=Arrays.asList(<span class="keyword">new</span> User(<span class="number">1L</span>,<span class="string">"zs"</span>,<span class="string">"male"</span>),</span><br><span class="line">                           <span class="keyword">new</span> User(<span class="number">2L</span>,<span class="string">"ls"</span>,<span class="string">"male"</span>),</span><br><span class="line">                           <span class="keyword">new</span> User(<span class="number">2L</span>,<span class="string">"ls"</span>,<span class="string">"female"</span>)</span><br><span class="line">             );</span><br><span class="line">     <span class="keyword">for</span> (Object obj:list)&#123;</span><br><span class="line">         System.out.println(obj.toString());</span><br><span class="line">     &#125;</span><br><span class="line">     list.parallelStream().forEach(ls-&gt; System.out.println(ls));</span><br></pre></td></tr></table></figure></blockquote><h3 id="stream-API"><a href="#stream-API" class="headerlink" title="stream API"></a>stream API</h3><blockquote><p> &ensp;  &ensp;  &ensp;  &ensp; 上面同时展现了一个stream，什么是stream（流）?他其实是对于集合的计算，stream本身不会存储数据，改变源数据,他的操作是延迟的，也就是需要的时候才会执行。</p><p> &ensp;  &ensp;  &ensp;  &ensp; 他其实是java7的Fork/Join，是一个并行执行任务框架 ，这一个框架会将任务拆分成若干小任务，然后连接结合，进行结果汇总。 ForkJoin采用了工作窃取（work-stealing）算法，若一个工作线程的任务队列为空没有任务执行时，便从其他工作线程中获取任务主动执行。为了实现工作窃取，在工作线程中维护了双端队列，窃取任务线程从队尾获取任务，被窃取任务线程从队头获取任务。这种机制充分利用线程进行并行计算，减少了线程竞争。但是当队列中只存在一个任务了时，两个线程去取反而会造成资源浪费。 </p><p>常用的一些方法：</p><table><thead><tr><th>方法</th><th align="left">说明</th></tr></thead><tbody><tr><td>parallelStream()</td><td align="left">并行流</td></tr><tr><td>stream()</td><td align="left">串行流</td></tr></tbody></table><p>中间操作</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>fileter  (Predicate p)</td><td>过滤</td></tr><tr><td>distinct（）</td><td>通过流元素产生的hashcode和equals去除重复元素</td></tr><tr><td>limit（long maxSize）</td><td>截断，使其不超过最大值</td></tr><tr><td>skip（long n）</td><td>跳过元素</td></tr><tr><td>map（Function f）</td><td>接收一个函数作为参数，该函数会被应用到每个元素，并映射成新的元素</td></tr><tr><td>mapToDouble(ToDoubleFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素，并产生一个新的DoubleStream</td></tr><tr><td>sort（）</td><td>按自然顺序排序（字典顺序）</td></tr><tr><td>sorted（Comparator  c）</td><td>按照比较器排序</td></tr></tbody></table><p>终止操作</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>allMatch（Predicate p）</td><td>检查是否匹配所有元素</td></tr><tr><td>anyMatch（Predicate p）</td><td>检查是否至少匹配一个元素</td></tr><tr><td>noneMatch（Predicate p）</td><td>检查是否没有匹配的元素</td></tr><tr><td>findFirst（）</td><td>返回第一个元素</td></tr><tr><td>findAny（）</td><td>返回任意当前流中的元素</td></tr><tr><td>count（）</td><td>返回流中数据的元素个数</td></tr><tr><td>max（Comparator c）</td><td>返回流中最大的值</td></tr><tr><td>min（Comparator  c）</td><td>返回流中最小的值</td></tr><tr><td>forEach（Consumer  c）</td><td>内部迭代</td></tr><tr><td>reduce（T iden , BinaryOperator b）</td><td>可以将流中元素反复结合起来，得到一个值，返回T</td></tr><tr><td>reduce（BianaryOperator b）</td><td>可以将流中元素反复结合起来，得到一个值。返回</td></tr><tr><td>collect(Collector  c)</td><td>结果转换</td></tr></tbody></table></blockquote><h3 id="Optional-类型"><a href="#Optional-类型" class="headerlink" title="Optional 类型"></a>Optional 类型</h3><blockquote><p> &ensp;  &ensp;  &ensp;  &ensp; 这是一个允许结果为空值的对象，从而减少了空指针的发生，例如对数据进行过滤的时候常常没有满足条件的数据这个时候就可以使用Optional </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JAVA8-1&quot;&gt;&lt;a href=&quot;#JAVA8-1&quot; class=&quot;headerlink&quot; title=&quot;JAVA8(1)&quot;&gt;&lt;/a&gt;JAVA8(1)&lt;/h2&gt;&lt;h3 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="java8" scheme="http://yoursite.com/categories/java8/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/28/HelloWord/"/>
    <id>http://yoursite.com/2020/04/28/HelloWord/</id>
    <published>2020-04-28T01:28:25.769Z</published>
    <updated>2020-04-29T00:27:06.932Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="tags" scheme="http://yoursite.com/tags/tags/"/>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
